/* Primary: blue */
/* text over primary background */
/* Secondary: green */
/* text over secondary background */
/* Accent: orange */
/* text over accent background */
/* Brag: gold */
/* text over brag background */
/* Error: red */
/* text over brag background */
/* Fancy: pink */
/* text over brag background */
/* Borders */
/* Brag: gold */
/* Fancy: pink */
/* Common imports for all live-loaded CSS (like the dasher) */
/* Widths */
/* Heights */
/* Orientations */
/* Capabilities */
/* Aliases */
/* var aliases */
#dasher_app {
  width: 200px;
  height: 300px;
  z-index: 2;
  border-radius: 3px 0 0 3px;
}

#dasher_app .spinner {
  margin: 20px auto;
}

#dasher_app .links,
#dasher_app .subs {
  padding: 5px 0;
}

#dasher_app .links a,
#dasher_app .links button,
#dasher_app .subs .sub {
  display: block;
  padding: 5px 10px;
  transition: 0.13s;
  white-space: nowrap;
  overflow: hidden;
}

#dasher_app .links a:hover,
#dasher_app .links button:hover,
#dasher_app .subs .sub:hover,
#dasher_app .langs form > *:hover {
  background: #F0F0F0;
  color: #444;
}

#dasher_app .links button {
  width: 100%;
  text-align: left;
  border: 0;
  background: none;
}

#dasher_app .subs {
  border-top: 1px solid #ddd;
}

#dasher_app .subs .sub:before {
  float: right;
  opacity: 0.5;
  font-size: 9px;
  margin-top: 4px;
  transition: 0.2s;
}

#dasher_app .subs .sub:hover:before {
  color: #3893E8;
  opacity: 0.8;
}

#dasher_app .status {
  display: block;
  position: relative;
  padding: 5px 0;
  border-top: 1px solid #ddd;
}

#dasher_app .status signal {
  position: absolute;
  right: 10px;
  top: 10px;
  font-size: 20px;
}

#dasher_app .status .ping,
#dasher_app .status .server {
  display: block;
  font-family: 'Roboto Mono', 'Roboto';
  padding-left: 10px;
}

#dasher_app .status strong {
  padding: 0 5px;
}

#dasher_app .head {
  display: block;
  padding: 15px 10px;
  background: #F0F0F0;
  color: #444;
}

#dasher_app .head::before {
  opacity: 0.5;
  transition: 0.3s;
}

#dasher_app .head:hover::before {
  color: #3893E8;
  opacity: 0.9;
}

#dasher_app .langs form {
  max-height: 400px;
  overflow: auto;
}

#dasher_app .langs form > * {
  display: block;
  padding: 0.4em 0.5em;
  border: none;
  background: none;
  width: 100%;
  text-align: left;
  box-sizing: border-box;
}

#dasher_app .langs .accepted {
  border-left: 3px solid #3893E8;
}

#dasher_app .langs .current {
  background: #3893E8 !important;
  color: #fff !important;
  border-left: none;
}

#dasher_app .selector {
  flex: 1 1 100%;
  margin: 5px 0;
}

#dasher_app .selector a {
  display: block;
  padding: 6px 0 6px 8px;
}

#dasher_app .selector a:hover {
  background: #F0F0F0;
  color: #444;
}

#dasher_app .selector a.active {
  background: #3893E8 !important;
  color: #fff !important;
}

#dasher_app .selector a::before {
  margin-right: 8px;
  font-size: 19px;
  justify-content: center;
  align-items: center;
  opacity: 0;
}

#dasher_app .selector a:hover::before {
  opacity: 1;
  color: #3893E8;
}

#dasher_app .selector a.active::before {
  opacity: 1;
  color: #fff !important;
}

#dasher_app .zen a::before {
  font-size: 18px;
  margin-right: 3px;
  opacity: 0.5;
}

#dasher_app .zen:hover a::before {
  opacity: 1;
}

#dasher_app .sound .content {
  display: flex;
  flex-flow: row;
}

#dasher_app .sound .selector a {
  border-radius: 3px 0 0 3px;
}

#dasher_app .sound .slider {
  flex: 0 0 8px;
  margin: 10px;
}

#dasher_app .sound.silent .slider {
  opacity: 0.2;
}

#dasher_app .sound .slider .ui-slider-handle {
  margin: 0 0 -9px -4px;
  border-radius: 50%;
  border-color: #3893E8 !important;
}

#dasher_app .sound .slider .ui-widget-header {
  width: 8px;
  bottom: 0;
  background: #3893E8 !important;
}

#dasher_app .background .image p {
  font-size: 0.9em;
  padding: 5px;
}

#dasher_app .background input {
  padding: 5px;
  border: 1px solid #444;
  box-sizing: border-box;
  width: 100%;
  background-color: #3e3e3e;
  color: #fff;
}

#dasher_app .board .zoom {
  margin: 5px 0px;
  border-top: 1px solid #ddd;
  padding: 10px 10px;
}

#dasher_app .board .slider {
  margin-top: 10px;
}

#dasher_app .theme .list {
  margin: 5px 0;
  display: flex;
  flex-flow: row wrap;
}

#dasher_app .theme .list a {
  flex: 0 0 50%;
  height: 40px;
  display: flex;
  justify-content: center;
  align-items: center;
}

#dasher_app .theme .list span {
  display: block;
  width: 64px;
  height: 32px;
  box-sizing: border-box;
}

#dasher_app .theme.d3 .list span {
  width: 66px;
  height: 30px;
  transition: transform 0.3s;
}

#dasher_app .theme .list a:hover {
  filter: brightness(1.1);
}

#dasher_app .theme .list a:hover span {
  transform: scale(1.05);
}

#dasher_app .theme .list a.active {
  background: #3893E8;
}

#dasher_app .piece .list {
  padding: 5px 0;
  display: flex;
  flex-flow: row wrap;
  background: url(../images/board/darksquares.jpg);
  box-shadow: inset 0 0 20px 3px #777;
}

#dasher_app .piece .no-square {
  width: 75px;
  height: 75px;
  position: relative;
}

#dasher_app .piece .no-square:hover {
  background: rgba(250, 250, 250, 0.15);
}

#dasher_app .piece .no-square.active {
  background: rgba(56, 147, 232, 0.5);
}

#dasher_app .piece piece {
  width: 100%;
  height: 100%;
}

#dasher_app .piece.d3 piece {
  left: 0;
  top: 0;
  background-size: cover;
  background-position: 0 67%;
}

#dasher_app .theme.d2 .blue {
  background-image: url(../images/board/svg/blue.svg);
  background-size: 256px;
}

#dasher_app .theme.d2 .blue2 {
  background-image: url(../images/board/blue2.thumbnail.jpg);
}

#dasher_app .theme.d2 .wood2 {
  background-image: url(../images/board/wood2.thumbnail.jpg);
}

#dasher_app .theme.d2 .wood3 {
  background-image: url(../images/board/wood3.thumbnail.jpg);
}

#dasher_app .theme.d2 .blue3 {
  background-image: url(../images/board/blue3.thumbnail.jpg);
}

#dasher_app .theme.d2 .marble {
  background-image: url(../images/board/marble.thumbnail.jpg);
}

#dasher_app .theme.d2 .brown {
  background-image: url(../images/board/svg/brown.svg);
  background-size: 256px;
}

#dasher_app .theme.d2 .green {
  background-image: url(../images/board/svg/green.svg);
  background-size: 256px;
}

#dasher_app .theme.d2 .olive {
  background-image: url(../images/board/olive.thumbnail.jpg);
}

#dasher_app .theme.d2 .purple {
  background-image: url(../images/board/svg/purple.svg);
  background-size: 256px;
}

#dasher_app .theme.d2 .grey {
  background-image: url(../images/board/grey.thumbnail.jpg);
}

#dasher_app .theme.d2 .wood {
  background-image: url(../images/board/wood.thumbnail.jpg);
}

#dasher_app .theme.d2 .canvas {
  background-image: url(../images/board/canvas2.thumbnail.jpg);
}

#dasher_app .theme.d2 .leather {
  background-image: url(../images/board/leather.thumbnail.jpg);
}

#dasher_app .theme.d2 .metal {
  background-image: url(../images/board/metal.thumbnail.jpg);
}

#dasher_app .theme.d2 .maple {
  background-image: url(../images/board/maple.thumbnail.jpg);
}

#dasher_app .theme.d3 .Black-White-Aluminium {
  background-image: url(../images/staunton/board/Black-White-Aluminium.thumbnail.png);
}

#dasher_app .theme.d3 .Brushed-Aluminium {
  background-image: url(../images/staunton/board/Brushed-Aluminium.thumbnail.png);
}

#dasher_app .theme.d3 .China-Blue {
  background-image: url(../images/staunton/board/China-Blue.thumbnail.png);
}

#dasher_app .theme.d3 .China-Green {
  background-image: url(../images/staunton/board/China-Green.thumbnail.png);
}

#dasher_app .theme.d3 .China-Grey {
  background-image: url(../images/staunton/board/China-Grey.thumbnail.png);
}

#dasher_app .theme.d3 .China-Scarlet {
  background-image: url(../images/staunton/board/China-Scarlet.thumbnail.png);
}

#dasher_app .theme.d3 .China-Yellow {
  background-image: url(../images/staunton/board/China-Yellow.thumbnail.png);
}

#dasher_app .theme.d3 .Classic-Blue {
  background-image: url(../images/staunton/board/Classic-Blue.thumbnail.png);
}

#dasher_app .theme.d3 .Transparent-Glass {
  background-image: url(../images/staunton/board/Glass.thumbnail.png);
}

#dasher_app .theme.d3 .Gold-Silver {
  background-image: url(../images/staunton/board/Gold-Silver.thumbnail.png);
}

#dasher_app .theme.d3 .Green-Glass {
  background-image: url(../images/staunton/board/Green-Glass.thumbnail.png);
}

#dasher_app .theme.d3 .Light-Wood {
  background-image: url(../images/staunton/board/Light-Wood.thumbnail.png);
}

#dasher_app .theme.d3 .Power-Coated {
  background-image: url(../images/staunton/board/Power-Coated.thumbnail.png);
}

#dasher_app .theme.d3 .Purple-Black {
  background-image: url(../images/staunton/board/Purple-Black.thumbnail.png);
}

#dasher_app .theme.d3 .Rosewood {
  background-image: url(../images/staunton/board/Rosewood.thumbnail.png);
}

#dasher_app .theme.d3 .Wood-Glass {
  background-image: url(../images/staunton/board/Wood-Glass.thumbnail.png);
}

#dasher_app .theme.d3 .Wax {
  background-image: url(../images/staunton/board/Wax.thumbnail.png);
}

#dasher_app .theme.d3 .Jade {
  background-image: url(../images/staunton/board/Jade.thumbnail.png);
}

#dasher_app .theme.d3 .Marble {
  background-image: url(../images/board/3d/marble.thumbnail.png);
}

#dasher_app .theme.d3 .Woodi {
  background-image: url(../images/board/3d/woodi.thumbnail.png);
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
